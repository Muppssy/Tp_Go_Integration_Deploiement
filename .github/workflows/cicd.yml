# DOC: https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
name: Build the app docker image

on:
  push

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versioning.outputs.version }}
      imageName: ${{ steps.versioning.outputs.imageName }}

    steps:
      - uses: actions/checkout@v4
      - name: Compute versions
        id: versioning
        shell: bash
        run: |
          set -euo pipefail
          version=$(git rev-parse --short HEAD)
          # 👇 forcer owner/repo en minuscules pour GHCR
          repo_lc=$(echo "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')
          imageName="ghcr.io/${repo_lc}:${version}"
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "imageName=$imageName" >> "$GITHUB_OUTPUT"
          echo "the image name :'$imageName'"
          {
            echo "## 🔖 New version '$version'"
            echo "## 📦 Image '$imageName'"
          } >> "$GITHUB_STEP_SUMMARY"

  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: [versioning]

    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      # 👇 build puis push l'image taggée exactement comme dans "versioning"
      - name: Build image
        run: docker build -t "${{ needs.versioning.outputs.imageName }}" .

      - name: Push image
        run: docker push "${{ needs.versioning.outputs.imageName }}"

  api-tests:
    runs-on: ubuntu-latest
    needs: [build-and-push, versioning]
    permissions:
      contents: read
      packages: read

    services:
      backend:
        image: ${{ needs.versioning.outputs.imageName }}   # 👈 corrige la réf
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - "8080:8080"

    steps:
      - uses: actions/checkout@v4
      - name: API tests
        run: |
          echo "## 🌐 API tests using ${{ needs.versioning.outputs.imageName }}" >> $GITHUB_STEP_SUMMARY
          # exemple: healthcheck basique si ton API expose /health
          curl -fsS http://localhost:8080/health || (echo "health failed"; exit 1)
