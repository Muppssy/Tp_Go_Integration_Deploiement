name: Build the app docker image

on:
  push

jobs:
  # 0) Tests unitaires
  test-unitaire:
    runs-on: ubuntu-latest
    needs: [test-unitaire, versioning, build-and-push]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true
      - name: Run unit tests (exclude integration)
        run: |
          PKGS=$(go list ./... | grep -v '/test/apitests$' || true)
          if [ -n "$PKGS" ]; then
            go test -count=1 -v $PKGS
          else
            echo "No unit-test packages to run."
          fi

  # 1) Versioning (← dépend de test-unitaire)
  versioning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versioning.outputs.version }}
      imageName: ${{ steps.versioning.outputs.imageName }}
    steps:
      - uses: actions/checkout@v4
      - name: Compute versions
        id: versioning
        shell: bash
        run: |
          set -euo pipefail
          version=$(git rev-parse --short HEAD)
          repo_lc=$(echo "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')
          imageName="ghcr.io/${repo_lc}:${version}"
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "imageName=$imageName" >> "$GITHUB_OUTPUT"
          {
            echo "## 🔖 New version '$version'"
            echo "## 📦 Image '$imageName'"
          } >> "$GITHUB_STEP_SUMMARY"

  # 2) Build & Push (← dépend de test-unitaire ET versioning)
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-unitaire, versioning]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Login to GHCR
        run: echo "${{secrets.GITHUB_TOKEN}}" | docker login ghcr.io -u "${{github.actor}}" --password-stdin
      - name: Build image
        run: docker build -t "${{ needs.versioning.outputs.imageName }}" .
      - name: Push image
        run: docker push "${{ needs.versioning.outputs.imageName }}"

  # 3) API tests (intégration)
  api-tests:
    runs-on: ubuntu-latest
    needs: [build-and-push, versioning]
    permissions:
      contents: read
      packages: read
    services:
      backend:
        image: ${{ needs.versioning.outputs.imageName }}
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - "8080:8080"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true
      - name: Wait for API (probe /api/cats or /cats)
        shell: bash
        run: |
          set -e
          for i in {1..30}; do
            for p in /api/cats /cats; do
              code=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:8080${p}" || true)
              echo "Probe ${p} -> ${code}"
              if [ "$code" = "200" ]; then exit 0; fi
            done
            sleep 2
          done
          echo "API never replied 200"; exit 1
      - name: Run integration tests
        run: |
          if [ -d "./test/apitests" ]; then
            go test -count=1 -v ./test/apitests
          else
            echo "No ./test/apitests package; skipping."
          fi
